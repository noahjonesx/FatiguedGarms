@if (IsOpen)
{
    <div class="cart-overlay" @onclick="CloseCart">
        <div class="cart-drawer" @onclick:stopPropagation="true">
            <div class="cart-header">
                <h3>Shopping Cart</h3>
                <button class="close-btn" @onclick="CloseCart">Ã—</button>
            </div>
            
            @if (CartItems.Any())
            {
                <div class="cart-items">
                    @foreach (var item in CartItems)
                    {
                        <div class="cart-item">
                            <div class="item-image">
                                <img src="@item.ImageUrl" alt="@item.Name" />
                            </div>
                            <div class="item-details">
                                <h4>@item.Name</h4>
                                <p>Size: @item.Size</p>
                                <p>Quantity: @item.Quantity</p>
                                <p class="item-price">$@item.Price</p>
                            </div>
                            <button class="remove-btn" @onclick="() => RemoveItem(item.Id)">Remove</button>
                        </div>
                    }
                </div>
                
                <div class="cart-footer">
                    <div class="cart-total">
                        <span>Total:</span>
                        <span>$@CartTotal</span>
                    </div>
                    <button class="checkout-btn" @onclick="Checkout">Checkout</button>
                </div>
            }
            else
            {
                <div class="empty-cart">
                    <p>Your cart is empty</p>
                    <button class="continue-shopping" @onclick="CloseCart">Continue Shopping</button>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsOpen { get; set; }
    
    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }
    
    private List<CartItem> CartItems { get; set; } = new();
    
    private decimal CartTotal => CartItems.Sum(item => item.Price * item.Quantity);
    
    private async Task CloseCart()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }
    
    private void RemoveItem(int itemId)
    {
        CartItems.RemoveAll(item => item.Id == itemId);
    }
    
    private void Checkout()
    {
        // TODO: Implement checkout functionality
        Console.WriteLine("Proceeding to checkout...");
    }
    
    public void AddItem(CartItem item)
    {
        var existingItem = CartItems.FirstOrDefault(i => i.Id == item.Id && i.Size == item.Size);
        if (existingItem != null)
        {
            existingItem.Quantity += item.Quantity;
        }
        else
        {
            CartItems.Add(item);
        }
    }
    
    public class CartItem
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Size { get; set; } = "";
        public int Quantity { get; set; }
        public decimal Price { get; set; }
        public string ImageUrl { get; set; } = "";
    }
}
